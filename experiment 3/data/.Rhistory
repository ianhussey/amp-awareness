# Take the above df, remove potential duplicates, and then spread
screen_qs <- questions %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
select(subject, trialcode, response) %>%
group_by(subject) %>%
spread(trialcode, response) %>%
ungroup() %>%
na.omit
# Manipulate df so that "influenced" refers to whether the trial response
# indicated the absence (0) or presence (1) of an influence of the prime
# Also filters incomplete AMP data, and ensures that only participants
# who answers all of the post-questions are included
int_AMP_cleaned <- intentional_AMP_df %>%
mutate(influenced = ifelse(trialcode == "intention_check" & correct == 1, 1, 0)) %>%
mutate(influenced = lead(influenced)) %>%
filter(trialcode == "prime_positive" | trialcode == "prime_negative") %>%
mutate(trialcode = ifelse(trialcode == "prime_positive", 1, 0)) %>%
group_by(subject) %>%
filter(n() == 72) %>%
semi_join(., screen, by = "subject") %>%
semi_join(., screen_qs, by = "subject") %>%
dplyr::rename(prime_type = trialcode)
# Do basically the same as above (without leading) for the standard AMP
standard_AMP_cleaned <- standard_AMP_df %>%
filter(trialcode == "prime_positive" | trialcode == "prime_negative") %>%
mutate(trialcode = ifelse(trialcode == "prime_positive", 1, 0)) %>%
group_by(subject) %>%
filter(n() == 72) %>%
semi_join(., screen, by = "subject") %>%
semi_join(., screen_qs, by = "subject") %>%
semi_join(., int_AMP_cleaned, by = "subject") %>%
dplyr::rename(prime_type = trialcode)
int_AMP_rescaled <- int_AMP_cleaned %>%
mutate(influenced = as.numeric(influenced) - .5,
prime_type = as.numeric(prime_type) - .5)
int_AMP_influenced <- int_AMP_rescaled %>%
filter(influenced == .5)
int_AMP_uninfluenced <- int_AMP_rescaled %>%
filter(influenced == -.5)
std_AMP_rescaled <- standard_AMP_cleaned %>%
mutate(prime_type = prime_type - .5)
# Creates an amp_effect column giving the AMP effect on the IA-AMP for each subject.
int_joiner <- int_AMP_rescaled %>%
group_by(subject, prime_type) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(prime_type, amp_effect) %>%
dplyr::rename(false_prime = "-0.5",
true_prime = "0.5") %>%
mutate(amp_effect = true_prime - false_prime)
# Creates an amp_effect column giving the AMP effect on the standard AMP for each subject.
std_joiner <- std_AMP_rescaled %>%
group_by(subject, prime_type) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(prime_type, amp_effect) %>%
dplyr::rename(false_prime = "-0.5",
true_prime = "0.5") %>%
mutate(std_amp_effect = true_prime - false_prime) %>%
dplyr::rename(std_true_prime = true_prime,
std_false_prime = false_prime)
# Creates an amp_effect column giving the AMP effect on the unintentional trials only
# in the IA-AMP for each subject.
unint_joiner <- int_AMP_rescaled %>%
filter(influenced == -.5) %>%
group_by(subject, prime_type) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(prime_type, amp_effect) %>%
dplyr::rename(unint_false_prime = "-0.5",
unint_true_prime = "0.5") %>%
mutate(unint_amp_effect = unint_true_prime - unint_false_prime)
# Creates a full data-frame, with information for each subject on their responses
# to the post-questions, their standard AMP effect, IA-AMP effect, and their
# IA-AMP effect on uninfluenced trials only.
full_subjects_df <- int_AMP_rescaled %>%
mutate(influenced = as.numeric(as.character(influenced))) %>%
group_by(subject) %>%
dplyr::summarize(influence_rate = mean(influenced)) %>%
ungroup() %>%
left_join(int_joiner, by = "subject") %>%
left_join(screen_qs, by = "subject") %>%
dplyr::rename(int_false_prime = false_prime,
int_true_prime = true_prime,
int_amp_effect = amp_effect) %>%
mutate(influence_rate = as.numeric(influence_rate),
influence_general = as.numeric(influence_general),
intentionality = as.numeric(intentionality),
unintentionality = as.numeric(unintentionality)) %>%
left_join(std_joiner, by = "subject") %>%
left_join(unint_joiner, by = "subject")
age_and_gender <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode != "ProlificCode") %>%
dplyr::select(subject, trialcode, response) %>%
spread(trialcode, response)
demographs <- full_subjects_df %>%
left_join(age_and_gender, by = "subject")
# Removes the NAs in the full_subjects_df: basically just removes participants whose AMP effect
# for uninfluenced trials was NA (i.e., because they reported all trials as influenced).
screened_subjects_df <- full_subjects_df %>%
na.omit()
write_csv(full_subjects_df, "processed/subject_level.csv")
write_csv(int_AMP_rescaled, "processed/intentional_AMP.csv")
write_csv(std_AMP_rescaled, "processed/standard_AMP.csv")
write_csv(screened_subjects_df, "processed/na_omitted_subjects.csv")
write_csv(demographs, "processed/demographs.csv")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
echo = FALSE)
# dependencies
library(plyr)
library(tidyverse)
library(data.table)
library(lme4)
library(sjPlot)
library(effects)
library(DescTools)
library(Rmisc)
library(effsize)
library(psych)
library(broom)
library(kableExtra)
# get data
subject_level_df       <- read.csv("../data/processed/subject_level.csv")
intentional_AMP_df     <- read.csv("../data/processed/intentional_AMP.csv")
standard_AMP_df        <- read.csv("../data/processed/standard_AMP.csv")
na_omitted_subjects_df <- read.csv("../data/processed/na_omitted_subjects.csv")
demographs             <- read.csv("../data/processed/demographs.csv")
# Gender
demographs %>%
dplyr::count(gender)
# Age mean and SD
demographs %>%
mutate(age = as.numeric(as.character(age))) %>%
summarise(m_age = mean(age), sd_age = sd(age))
# fit model
model_m1_int <- glmer(correct ~ prime_type + (1|subject),
family = binomial(link = "logit"),
data = intentional_AMP_df)
# plot
sjp.glmer(model_m1_int, type = "pred", vars = c("correct"))
# results table
sjt.glmer(model_m1_int)
# fit model
model_m1_std <- glmer(correct ~ prime_type + (1|subject),
family = binomial(link = "logit"),
data = standard_AMP_df)
# plot
sjp.glmer(model_m1_std, type = "pred", vars = c("correct"))
# results table
sjt.glmer(model_m1_std)
# model
model_h1 <- glmer(correct ~ influenced * prime_type + (1|subject),
family = binomial(link = "logit"),
data = intentional_AMP_df)
# plot
sjp.glmer(model_h1, type = "pred", vars = c("correct", "influenced"))
# results table
sjt.glmer(model_h1, digits.p = 20)
# model
fit_h2 <- lm(int_amp_effect ~ influence_rate,
data = subject_level_df)
# plot
ggplot(subject_level_df, aes(influence_rate, int_amp_effect)) +
geom_point() +
geom_rug() +
geom_smooth(method = lm) +
labs(x = "Rate of influence", y = "IA-AMP effect size") +
theme_classic()
# table
sjt.lm(fit_h2, show.std = TRUE, digits.p = 15)
# model
fit_h3 <- lm(std_amp_effect ~ influence_rate,
data = subject_level_df)
# plot
ggplot(subject_level_df, aes(influence_rate, std_amp_effect)) +
geom_point() +
geom_rug() +
geom_smooth(method = lm) +
labs(x = "Rate of influence", y = "Standard AMP effect size") +
theme_classic()
# table
sjt.lm(fit_h3, show.std = TRUE, digits.p = 15)
na_omitted_subjects_df %>%
summarise("Mean: Standard AMP" = mean(std_amp_effect))
na_omitted_subjects_df %>%
summarise("SD: Standard AMP" = sd(std_amp_effect))
na_omitted_subjects_df %>%
summarise("Mean: Unintentional trials only" = mean(unint_amp_effect))
na_omitted_subjects_df %>%
summarise("SD: Unintentional trials only" = sd(unint_amp_effect))
t.test(na_omitted_subjects_df$std_amp_effect, na_omitted_subjects_df$unint_amp_effect,
paired = TRUE) %>%
tidy() %>%
gather() %>%
kable()
demographics_df    <- read.csv("raw/demographics_18_08_01.csv")
intentional_AMP_df <- read.csv("raw/modified_intentionality_amp_18_08_01.csv")
post_df            <- read.csv("raw/post-questions_18_08_01.csv")
screen <- full_join(prolificid_df, self_exclusion, by="subject") %>%
group_by(subject)
View(screen)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
echo = FALSE)
# dependencies
library(tidyverse)
library(lme4)
library(sjPlot)
library(effects)
library(DescTools)
library(Rmisc)
library(effsize)
library(psych)
# get data
demographics_df    <- read.csv("raw/demographics_18_08_01.csv")
intentional_AMP_df <- read.csv("raw/modified_intentionality_amp_18_08_01.csv")
post_df            <- read.csv("raw/post-questions_18_08_01.csv")
# match Prolific IDs to subject numbers
prolificid_df <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode == "ProlificCode") %>%
dplyr::select(subject, response)
# Screen questions df for unique values, thus removing duplicates
self_exclusion <- post_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
dplyr::select(subject, trialcode, response)
# Join the above two dfs, filter for only the appropriate number of rows
screen <- full_join(prolificid_df, self_exclusion, by="subject") %>%
group_by(subject) %>%
filter(n() == 6) %>%
dplyr::rename(prolificid = response.x,
response = response.y) %>%
mutate(response = as.character(response))
# recode post_df responses, remove NAs
questions <- post_df %>%
mutate(response = as.character(response)) %>%
mutate(response = ifelse(response == "none" | response == "Never", 1,
ifelse(response == "a few" | response == "Very rarely", 2,
ifelse(response == "less than half" | response == "Somewhat rarely", 3,
ifelse(response == "about half" | response == "Sometimes", 4,
ifelse(response == "more than half", 5,
ifelse(response == "most", 6,
ifelse(response == "all", 7, response)))))))) %>%
na.omit
# Take the above df, remove potential duplicates, and then spread
screen_qs <- questions %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
select(subject, trialcode, response) %>%
group_by(subject) %>%
spread(trialcode, response) %>%
ungroup() %>%
na.omit
# Manipulate df so that "influenced" refers to whether the trial response
# indicated the absence (0) or presence (1) of an influence of the prime
# Also filters incomplete AMP data, and ensures that only participants
# who answers all of the post-questions are included
int_AMP_cleaned <- intentional_AMP_df %>%
mutate(influenced = ifelse(trialcode == "intention_check" & correct == 1, 1, 0)) %>%
mutate(influenced = lead(influenced)) %>%
filter(trialcode == "prime_positive" | trialcode == "prime_negative") %>%
mutate(trialcode = ifelse(trialcode == "prime_positive", 1, 0)) %>%
group_by(subject) %>%
filter(n() == 120) %>%
semi_join(., screen, by = "subject") %>%
semi_join(., screen_qs, by = "subject") %>%
dplyr::rename(prime_type = trialcode)
int_AMP_rescaled <- int_AMP_cleaned %>%
mutate(influenced = as.numeric(influenced) - .5,
prime_type = as.numeric(prime_type) - .5)
int_AMP_influenced <- int_AMP_rescaled %>%
filter(influenced == .5)
int_AMP_uninfluenced <- int_AMP_rescaled %>%
filter(influenced == -.5)
std_AMP_rescaled <- standard_AMP_cleaned %>%
mutate(prime_type = prime_type - .5)
# Creates an amp_effect column giving the AMP effect on the IA-AMP for each subject.
int_joiner <- int_AMP_rescaled %>%
group_by(subject, prime_type) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(prime_type, amp_effect) %>%
dplyr::rename(false_prime = "-0.5",
true_prime = "0.5") %>%
mutate(amp_effect = true_prime - false_prime)
# Creates an amp_effect column giving the AMP effect on the standard AMP for each subject.
std_joiner <- std_AMP_rescaled %>%
group_by(subject, prime_type) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(prime_type, amp_effect) %>%
dplyr::rename(false_prime = "-0.5",
true_prime = "0.5") %>%
mutate(std_amp_effect = true_prime - false_prime) %>%
dplyr::rename(std_true_prime = true_prime,
std_false_prime = false_prime)
# Creates an amp_effect column giving the AMP effect on the unintentional trials only
# in the IA-AMP for each subject.
unint_joiner <- int_AMP_rescaled %>%
filter(influenced == -.5) %>%
group_by(subject, prime_type) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(prime_type, amp_effect) %>%
dplyr::rename(unint_false_prime = "-0.5",
unint_true_prime = "0.5") %>%
mutate(unint_amp_effect = unint_true_prime - unint_false_prime)
# Creates a full data-frame, with information for each subject on their responses
# to the post-questions, their standard AMP effect, IA-AMP effect, and their
# IA-AMP effect on uninfluenced trials only.
full_subjects_df <- int_AMP_rescaled %>%
mutate(influenced = as.numeric(as.character(influenced))) %>%
group_by(subject) %>%
dplyr::summarize(influence_rate = mean(influenced)) %>%
ungroup() %>%
left_join(int_joiner, by = "subject") %>%
left_join(screen_qs, by = "subject") %>%
dplyr::rename(int_false_prime = false_prime,
int_true_prime = true_prime,
int_amp_effect = amp_effect) %>%
mutate(influence_rate = as.numeric(influence_rate),
influence_general = as.numeric(influence_general),
intentionality = as.numeric(intentionality),
unintentionality = as.numeric(unintentionality)) %>%
left_join(std_joiner, by = "subject") %>%
left_join(unint_joiner, by = "subject")
age_and_gender <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode != "ProlificCode") %>%
dplyr::select(subject, trialcode, response) %>%
spread(trialcode, response)
demographs <- full_subjects_df %>%
left_join(age_and_gender, by = "subject")
# Removes the NAs in the full_subjects_df: basically just removes participants whose AMP effect
# for uninfluenced trials was NA (i.e., because they reported all trials as influenced).
screened_subjects_df <- full_subjects_df %>%
na.omit()
write_csv(full_subjects_df, "processed/subject_level.csv")
write_csv(int_AMP_rescaled, "processed/intentional_AMP.csv")
write_csv(std_AMP_rescaled, "processed/standard_AMP.csv")
write_csv(screened_subjects_df, "processed/na_omitted_subjects.csv")
write_csv(demographs, "processed/demographs.csv")
full_subjects_df <- int_AMP_rescaled %>%
mutate(influenced = as.numeric(as.character(influenced))) %>%
group_by(subject) %>%
dplyr::summarize(influence_rate = mean(influenced)) %>%
ungroup() %>%
left_join(int_joiner, by = "subject") %>%
left_join(screen_qs, by = "subject") %>%
dplyr::rename(int_false_prime = false_prime,
int_true_prime = true_prime,
int_amp_effect = amp_effect) %>%
mutate(influence_rate = as.numeric(influence_rate),
influence_general = as.numeric(influence_general),
intentionality = as.numeric(intentionality),
unintentionality = as.numeric(unintentionality))
prolificid_df <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode == "ProlificCode") %>%
dplyr::select(subject, response)
# Screen questions df for unique values, thus removing duplicates
self_exclusion <- post_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
dplyr::select(subject, trialcode, response)
# Join the above two dfs, filter for only the appropriate number of rows
screen <- full_join(prolificid_df, self_exclusion, by="subject") %>%
group_by(subject) %>%
filter(n() == 6) %>%
dplyr::rename(prolificid = response.x,
response = response.y) %>%
mutate(response = as.character(response))
# recode post_df responses, remove NAs
questions <- post_df %>%
mutate(response = as.character(response)) %>%
mutate(response = ifelse(response == "none" | response == "Never", 1,
ifelse(response == "a few" | response == "Very rarely", 2,
ifelse(response == "less than half" | response == "Somewhat rarely", 3,
ifelse(response == "about half" | response == "Sometimes", 4,
ifelse(response == "more than half", 5,
ifelse(response == "most", 6,
ifelse(response == "all", 7, response)))))))) %>%
na.omit
# Take the above df, remove potential duplicates, and then spread
screen_qs <- questions %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
select(subject, trialcode, response) %>%
group_by(subject) %>%
spread(trialcode, response) %>%
ungroup() %>%
na.omit
int_AMP_cleaned <- intentional_AMP_df %>%
mutate(influenced = ifelse(trialcode == "intention_check" & correct == 1, 1, 0)) %>%
mutate(influenced = lead(influenced)) %>%
filter(trialcode == "prime_positive" | trialcode == "prime_negative") %>%
mutate(trialcode = ifelse(trialcode == "prime_positive", 1, 0)) %>%
group_by(subject) %>%
filter(n() == 120) %>%
semi_join(., screen, by = "subject") %>%
semi_join(., screen_qs, by = "subject") %>%
dplyr::rename(prime_type = trialcode)
int_AMP_rescaled <- int_AMP_cleaned %>%
mutate(influenced = as.numeric(influenced) - .5,
prime_type = as.numeric(prime_type) - .5)
int_AMP_influenced <- int_AMP_rescaled %>%
filter(influenced == .5)
int_AMP_uninfluenced <- int_AMP_rescaled %>%
filter(influenced == -.5)
# Creates an amp_effect column giving the AMP effect on the IA-AMP for each subject.
int_joiner <- int_AMP_rescaled %>%
group_by(subject, prime_type) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(prime_type, amp_effect) %>%
dplyr::rename(false_prime = "-0.5",
true_prime = "0.5") %>%
mutate(amp_effect = true_prime - false_prime)
full_subjects_df <- int_AMP_rescaled %>%
mutate(influenced = as.numeric(as.character(influenced))) %>%
group_by(subject) %>%
dplyr::summarize(influence_rate = mean(influenced)) %>%
ungroup() %>%
left_join(int_joiner, by = "subject") %>%
left_join(screen_qs, by = "subject") %>%
dplyr::rename(int_false_prime = false_prime,
int_true_prime = true_prime,
int_amp_effect = amp_effect) %>%
mutate(influence_rate = as.numeric(influence_rate),
influence_general = as.numeric(influence_general),
intentionality = as.numeric(intentionality),
unintentionality = as.numeric(unintentionality))
age_and_gender <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode != "ProlificCode") %>%
dplyr::select(subject, trialcode, response) %>%
spread(trialcode, response)
demographs <- full_subjects_df %>%
left_join(age_and_gender, by = "subject")
# for uninfluenced trials was NA (i.e., because they reported all trials as influenced).
screened_subjects_df <- full_subjects_df %>%
na.omit()
subject_level_df       <- read.csv("../data/processed/subject_level.csv")
intentional_AMP_df     <- read.csv("../data/processed/intentional_AMP.csv")
na_omitted_subjects_df <- read.csv("../data/processed/na_omitted_subjects.csv")
demographs             <- read.csv("../data/processed/demographs.csv")
subject_level_df       <- read.csv("../data/processed/subject_level.csv")
demographs %>%
dplyr::count(gender)
# Age mean and SD
demographs %>%
mutate(age = as.numeric(as.character(age))) %>%
summarise(m_age = mean(age), sd_age = sd(age))
# fit model
model_m1_int <- glmer(correct ~ prime_type + (1|subject),
family = binomial(link = "logit"),
data = intentional_AMP_df)
# plot
sjp.glmer(model_m1_int, type = "pred", vars = c("correct"))
# results table
sjt.glmer(model_m1_int)
model_h1 <- glmer(correct ~ influenced * prime_type + (1|subject),
family = binomial(link = "logit"),
data = intentional_AMP_df)
# plot
sjp.glmer(model_h1, type = "pred", vars = c("correct", "influenced"))
# results table
sjt.glmer(model_h1, digits.p = 20)
fit_h2 <- lm(int_amp_effect ~ influence_rate,
data = subject_level_df)
# plot
ggplot(subject_level_df, aes(influence_rate, int_amp_effect)) +
geom_point() +
geom_rug() +
geom_smooth(method = lm) +
labs(x = "Rate of influence", y = "IA-AMP effect size") +
theme_classic()
# table
sjt.lm(fit_h2, show.std = TRUE, digits.p = 15)
ggplot(data = subjectlevel_df, aes(x = influence_general, y = influence_rate)) +
geom_point() + theme_classic()
ggplot(data = subject_level_df, aes(x = influence_general, y = influence_rate)) +
geom_point() + theme_classic()
ggplot(data = subject_level_df, aes(x = influence_general, y = influence_rate)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
fit_h3 <- lm(influence_rate ~ influence_general, data = subject_level_df)
sjt.lm(fit_h3, show.std = TRUE, digits.p = 15)
fit_h4 <- lm(amp_effect ~ influence_general + influence_rate, data = subject_level_df)
fit_h4 <- lm(amp_effect ~ influence_general + influence_rate, data = full_subjects_df)
fit_h4 <- lm(int_amp_effect ~ influence_general + influence_rate, data = subject_level_df)
sjp.lm(fit_h4)
sjt.lm(fit_h4, show.std = TRUE)
# plot
sjp.lm(fit_h4,
type = "pred",
vars = c("influence_general", "influence_rate"))
# plot
sjp.lm(fit_h4,
type = "pred",
vars = c("influence_rate"))
fit_h4 <- lm(int_amp_effect ~ influence_rate, data = subject_level_df)
sjt.lm(fit_h4, show.std = TRUE)
fit_h4 <- lm(int_amp_effect ~ influence_general, data = subject_level_df)
sjt.lm(fit_h4, show.std = TRUE)
sjp.lm(fit_h4)
fit_h4 <- lm(int_amp_effect ~ influence_general + influence_rate, data = subject_level_df)
sjp.lm(fit_h4)
sjt.lm(fit_h4, show.std = TRUE)
sjp.lm(fit_h4)
