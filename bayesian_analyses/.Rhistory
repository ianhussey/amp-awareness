hypothesis(model_fit,
hypothesis = "b_prime_typeprime_type_B = 0",
class = NULL,
alpha = .05) %>%
plot(plot = FALSE)
# prior/posterior of inf
p_influenced <-
hypothesis(model_fit,
hypothesis = "b_influencedyes = 0",
class = NULL,
alpha = .05) %>%
plot(plot = FALSE)
# prior/posterior of interaction
p_interaction <-
hypothesis(model_fit,
hypothesis = "b_influencedyes:prime_typeprime_type_B = 0",
class = NULL,
alpha = .05) %>%
plot(plot = FALSE)
# prior/posterior of sd of random effect
p_sd <-
hypothesis(model_fit,
hypothesis = "sd_subject__Intercept = 0",
class = NULL,
alpha = .05) %>%
plot(plot = FALSE)
return(list(p_intercept = p_intercept,
p_prime = p_prime,
p_influenced = p_influenced,
p_interaction = p_interaction,
p_sd = p_sd))
}
plot_prior_vs_posterior(fit_1_weak_prior)
key_results_and_plots  <- function(model_fit) {
ROPE_data <- rope(model_fit, rope = c(-0.1, 0.1)) %>%  # NEEDS GREAT THOUGHT FOR ORs
rename(Parameter = term,
`% inside ROPE` = rope) %>%
filter(grepl("b_", Parameter) & !grepl("prior", Parameter)) %>%
mutate(Parameter = str_replace_all(Parameter, "b_", ""),
Parameter = str_replace_all(Parameter, "[.]", ":"))
results <- summary(model_fit)$fixed %>%
as.data.frame() %>%
rownames_to_column(var = "Parameter") %>%
rename(OR = Estimate,
SE = Est.Error,
Lower = `l-95% CI`,
Upper = `u-95% CI`) %>%
full_join(ROPE_data, by = "Parameter") %>%
mutate(OR = exp(OR),
Lower = exp(Lower),
Upper = exp(Upper)) %>%
round_df(2)
# plot effects
plot_effects <- plot_model(model_fit,
prob.inner = 0.5,
prob.outer = 0.95)
# plot marginal means
plot_marginal <- plot(marginal_effects(model_fit), ask = FALSE)
return(list(results = results,
plot_effects = plot_effects,
plot_marginal = plot_marginal))
}
# extract results
fit_1_weak_prior_results <- key_results_and_plots(fit_1_weak_prior)
# table
fit_1_weak_prior_results$results %>%
select(Parameter, OR, Lower, Upper, Eff.Sample, Rhat) %>%
rename() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
add_header_above(c(" " = 2, "95% CI" = 2, " " = 2))
# plot effects
fit_1_weak_prior_results$plot_effects
# plot marginal means
fit_1_weak_prior_results$plot_marginal$`influenced:prime_type`
key_results_and_plots  <- function(model_fit) {
ROPE_data <- rope(model_fit, rope = c(-0.1, 0.1)) %>%  # NEEDS GREAT THOUGHT FOR ORs
rename(Parameter = term,
`% inside ROPE` = rope) %>%
filter(grepl("b_", Parameter) & !grepl("prior", Parameter)) %>%
mutate(Parameter = str_replace_all(Parameter, "b_", ""),
Parameter = str_replace_all(Parameter, "[.]", ":"))
results <- summary(model_fit)$fixed %>%
as.data.frame() %>%
rownames_to_column(var = "Parameter") %>%
rename(OR = Estimate,
SE = Est.Error,
Lower = `l-95% CI`,
Upper = `u-95% CI`) %>%
full_join(ROPE_data, by = "Parameter") %>%
mutate(OR = exp(OR),
Lower = exp(Lower),
Upper = exp(Upper)) %>%
round_df(2)
# plot effects
plot_effects <- plot_model(model_fit,
prob.inner = 0.5,
prob.outer = 0.95,
plot = FALSE)
# plot marginal means
plot_marginal <- plot(marginal_effects(model_fit),
ask = FALSE,
plot = FALSE)
return(list(results = results,
plot_effects = plot_effects,
plot_marginal = plot_marginal))
}
# extract results
fit_1_weak_prior_results <- key_results_and_plots(fit_1_weak_prior)
# table
fit_1_weak_prior_results$results %>%
select(Parameter, OR, Lower, Upper, Eff.Sample, Rhat) %>%
rename() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
add_header_above(c(" " = 2, "95% CI" = 2, " " = 2))
# plot effects
fit_1_weak_prior_results$plot_effects
# plot marginal means
fit_1_weak_prior_results$plot_marginal$`influenced:prime_type`
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_1_weak_prior %>%
hypothesis(hypothesis = "influencedyes:prime_typeprime_type_B = 0", alpha = .05)
# Posterior evidence ratio (Bayesian p value)
post_evid_ratio <- fit_1_weak_prior %>%
hypothesis(hypothesis = "influencedyes:prime_typeprime_type_B > 0", alpha = .05)
round(1/sav_dic$hypothesis$Evid.Ratio, 3)
round(1/post_evid_ratio$hypothesis$Evid.Ratio, 5)
round(post_evid_ratio$hypothesis$Evid.Ratio, 5)
round(1/sav_dic$hypothesis$Evid.Ratio, 3)
# plot posterior vs parameterisation of it.
plot_posterior_as_prior <- function(model_fit) {
posterior <- as.data.frame(model_fit)
# b_Intercept
p_intercept <-
ggplot() +
geom_density(data = posterior,
aes(b_Intercept, color = "posterior")) +
stat_function(data = data.frame(x = c(min(posterior$b_Intercept),
max(posterior$b_Intercept))),
aes(x, color = "parameterised"),
fun = dnorm,
n = 101,
args = list(mean = mean(posterior$b_Intercept),
sd = sd(posterior$b_Intercept)),
linetype = "dashed") +
scale_colour_viridis_d(begin = 0.3, end = 0.8, direction = -1)
# b_prime_typeprime_type_B
p_prime <-
ggplot() +
geom_density(data = posterior,
aes(b_prime_typeprime_type_B, color = "posterior")) +
stat_function(data = data.frame(x = c(min(posterior$b_prime_typeprime_type_B),
max(posterior$b_prime_typeprime_type_B))),
aes(x, color = "parameterised"),
fun = dnorm,
n = 101,
args = list(mean = mean(posterior$b_prime_typeprime_type_B),
sd = sd(posterior$b_prime_typeprime_type_B)),
linetype = "dashed") +
scale_colour_viridis_d(begin = 0.3, end = 0.8, direction = -1)
# b_influencedyes
p_influnce <-
ggplot() +
geom_density(data = posterior,
aes(b_influencedyes, color = "posterior")) +
stat_function(data = data.frame(x = c(min(posterior$b_influencedyes),
max(posterior$b_influencedyes))),
aes(x, color = "parameterised"),
fun = dnorm,
n = 101,
args = list(mean = mean(posterior$b_influencedyes),
sd = sd(posterior$b_influencedyes)),
linetype = "dashed") +
scale_colour_viridis_d(begin = 0.3, end = 0.8, direction = -1)
# b_influencedyes.prime_typeprime_type_B
p_interaction <-
ggplot() +
geom_density(data = posterior,
aes(b_influencedyes.prime_typeprime_type_B, color = "posterior")) +
stat_function(data = data.frame(x = c(min(posterior$b_influencedyes.prime_typeprime_type_B),
max(posterior$b_influencedyes.prime_typeprime_type_B))),
aes(x, color = "parameterised"),
fun = dnorm,
n = 101,
args = list(mean = mean(posterior$b_influencedyes.prime_typeprime_type_B),
sd = sd(posterior$b_influencedyes.prime_typeprime_type_B)),
linetype = "dashed") +
scale_colour_viridis_d(begin = 0.3, end = 0.8, direction = -1)
# sd of subject
p_sd <-
ggplot() +
geom_density(data = posterior,
aes(sd_subject__Intercept, color = "posterior")) +
stat_function(data = data.frame(x = c(min(posterior$sd_subject__Intercept),
max(posterior$sd_subject__Intercept))),
aes(x, color = "parameterised"),
fun = dnorm,
n = 101,
args = list(mean = mean(posterior$sd_subject__Intercept),
sd = sd(posterior$sd_subject__Intercept)),
linetype = "dashed") +
scale_colour_viridis_d(begin = 0.3, end = 0.8, direction = -1)
return(list(p_intercept = p_intercept,
p_prime = p_prime,
p_influnce = p_influnce,
p_interaction = p_interaction,
p_sd = p_sd))
}
plot_posterior_as_prior(fit_1_weak_prior)
# model specific setup
data          <- exp_2_ia_amp_trial_level_data
model_path    <- "models/IA-AMP trial level moderated by influence/fit_2_informed_prior"
# use posterior of previous model as prior for this one
posterior_as_prior <- function(model_fit) {
posterior <- as.data.frame(model_fit)
prior <-
c(set_prior(prior = paste0("normal(", mean(posterior$b_Intercept), ", ",
sd(posterior$b_Intercept), ")"),
class = "Intercept"),
set_prior(prior = paste0("normal(", mean(posterior$b_prime_typeprime_type_B), ", ", sd(posterior$b_prime_typeprime_type_B), ")"),
class = "b",
coef = "prime_typeprime_type_B"),
set_prior(prior = paste0("normal(", mean(posterior$b_influencedyes), ", ",
sd(posterior$b_influencedyes), ")"),
class = "b",
coef = "influencedyes"),
set_prior(prior = paste0("normal(", mean(posterior$b_influencedyes.prime_typeprime_type_B), ", ",
sd(posterior$b_influencedyes.prime_typeprime_type_B), ")"),
class = "b",
coef = "influencedyes:prime_typeprime_type_B"),
set_prior(prior = paste0("normal(", mean(posterior$sd), ", ",
sd(posterior$sd), ")"),
class = "sd"))
return(prior)
}
prior <- posterior_as_prior(fit_1_weak_prior)
# fit model
fit_2 <- brm(formula      = model_formula,
family       = model_family,
data         = data,
prior        = prior,
iter         = iterations,
chains       = chains,
sample_prior = sample_prior,
cores        = cores,
control      = control,
file         = model_path)
# check the fit between the posterior distribution and the observed data
pp_check(fit_2, nsamples = 10)
plot(fit_2, ask = FALSE)
plot_prior_vs_posterior(fit_2)
# extract results
fit_2_results <- key_results_and_plots(fit_2_results)
# extract results
fit_2_results <- key_results_and_plots(fit_2)
# table
fit_2_results$results %>%
select(Parameter, OR, Lower, Upper, Eff.Sample, Rhat) %>%
rename() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
add_header_above(c(" " = 2, "95% CI" = 2, " " = 2))
# plot effects
fit_2_results$plot_effects
# plot marginal means
fit_2_results$plot_marginal$`influenced:prime_type`
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(fit_1_posterior$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(fit_1_weak_prior$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(fit_2$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(as.data.frame(fit_2)$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(as.data.frame(fit_1)$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(as.data.frame(fit_1_weak_prior)$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ", round(mean(as.data.frame(fit_1_weak_prior)$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Posterior evidence ratio (Bayesian p value)
post_evid_ratio <- fit_2 %>%
hypothesis(hypothesis = "influencedyes:prime_typeprime_type_B > 0", alpha = .05)
round(1/sav_dic$hypothesis$Evid.Ratio, 3)
round(mean(as.data.frame(fit_1_weak_prior)$b_influencedyes.prime_typeprime_type_B), 2)
round(1/sav_dic$hypothesis$Evid.Ratio, 3)
round(mean(as.data.frame(fit_1_weak_prior)$b_influencedyes.prime_typeprime_type_B), 2)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_2 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ", round(mean(as.data.frame(fit_1_weak_prior)$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Posterior evidence ratio (Bayesian p value)
post_evid_ratio <- fit_2 %>%
hypothesis(hypothesis = "influencedyes:prime_typeprime_type_B > 0", alpha = .05)
plot_posterior_as_prior(fit_2)
# model specific setup
data          <- exp_3_ia_amp_trial_level_data
model_path    <- "models/IA-AMP trial level moderated by influence/fit_3_informed_prior"
prior         <- posterior_as_prior(fit_2)
# fit model
fit_3 <- brm(formula      = model_formula,
family       = model_family,
data         = data,
prior        = prior,
iter         = iterations,
chains       = chains,
sample_prior = sample_prior,
cores        = cores,
control      = control,
file         = model_path)
# check the fit between the posterior distribution and the observed data
pp_check(fit_3, nsamples = 10)
plot(fit_3, ask = FALSE)
plot_prior_vs_posterior(fit_3)
# extract results
fit_3_results <- key_results_and_plots(fit_3)
# table
fit_3_results$results %>%
select(Parameter, OR, Lower, Upper, Eff.Sample, Rhat) %>%
rename() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
add_header_above(c(" " = 2, "95% CI" = 2, " " = 2))
# plot effects
fit_3_results$plot_effects
# plot marginal means
fit_3_results$plot_marginal$`influenced:prime_type`
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_3 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(as.data.frame(fit_2)$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Posterior evidence ratio (Bayesian p value)
post_evid_ratio <- fit_3 %>%
hypothesis(hypothesis = "influencedyes:prime_typeprime_type_B > 0", alpha = .05)
round(1/sav_dic$hypothesis$Evid.Ratio, 3)
round(mean(as.data.frame(fit_2_weak_prior)$b_influencedyes.prime_typeprime_type_B), 2)
round(mean(as.data.frame(fit_2)$b_influencedyes.prime_typeprime_type_B), 2)
round(1/sav_dic$hypothesis$Evid.Ratio, 3)
round(mean(as.data.frame(fit_2)$b_influencedyes.prime_typeprime_type_B), 2)
round(post_evid_ratio$hypothesis$Evid.Ratio, 5)
plot_posterior_as_prior(fit_3)
# model specific setup
data          <- exp_4_ia_amp_trial_level_data
model_path    <- "models/IA-AMP trial level moderated by influence/fit_4_informed_prior"
prior         <- posterior_as_prior(fit_3)
# fit model
fit_4 <- brm(formula      = model_formula,
family       = model_family,
data         = data,
prior        = prior,
iter         = iterations,
chains       = chains,
sample_prior = sample_prior,
cores        = cores,
control      = control,
file         = model_path)
# check the fit between the posterior distribution and the observed data
pp_check(fit_4, nsamples = 10)
plot(fit_4, ask = FALSE)
plot_prior_vs_posterior(fit_4)
# extract results
fit_4_results <- key_results_and_plots(fit_4)
# table
fit_4_results$results %>%
select(Parameter, OR, Lower, Upper, Eff.Sample, Rhat) %>%
rename() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
add_header_above(c(" " = 2, "95% CI" = 2, " " = 2))
# plot effects
fit_4_results$plot_effects
# plot marginal means
fit_4_results$plot_marginal$`influenced:prime_type`
log(0.06)
exp(2.813411)
# Savage-Dickey Bayes Factor (BF10)
sav_dic <- fit_4 %>%
hypothesis(hypothesis = paste0("influencedyes:prime_typeprime_type_B = ",
round(mean(as.data.frame(fit_3)$b_influencedyes.prime_typeprime_type_B), 2)),
alpha = .05)
# Posterior evidence ratio (Bayesian p value)
post_evid_ratio <- fit_4 %>%
hypothesis(hypothesis = "influencedyes:prime_typeprime_type_B > 0", alpha = .05)
round(1/sav_dic$hypothesis$Evid.Ratio, 3)
round(mean(as.data.frame(fit_3)$b_influencedyes.prime_typeprime_type_B), 2)
round(post_evid_ratio$hypothesis$Evid.Ratio, 5)
# model specific setup
model_formula <- rating ~ influenced * prime_type + (1 | subject) + (1 | Experiment)
data          <- combined_data
model_path    <- "models/IA-AMP trial level moderated by influence/fit_combination_weak_prior"
prior         <- weak_prior
# fit model
fit_combination_weak_prior <-
brm(formula      = model_formula,
family       = model_family,
data         = data,
prior        = prior,
iter         = iterations,
chains       = chains,
sample_prior = sample_prior,
cores        = cores,
control      = control,
file         = model_path)
# for models with weak priors, weak priors placed on all parameters using reccomendations from  https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations
weak_prior    <- c(set_prior(prior = "normal(0, 1)"))
# model specific setup
model_formula <- rating ~ influenced * prime_type + (1 | subject) + (1 | Experiment)
data          <- combined_data
model_path    <- "models/IA-AMP trial level moderated by influence/fit_combination_weak_prior"
prior         <- weak_prior
# fit model
fit_combination_weak_prior <-
brm(formula      = model_formula,
family       = model_family,
data         = data,
prior        = prior,
iter         = iterations,
chains       = chains,
sample_prior = sample_prior,
cores        = cores,
control      = control,
file         = model_path)
# set seed
set.seed(42)
# disable scientific notation
options(scipen = 999)
# options
options(knitr.table.format = "html")  # comment out if knitting to pdf
# dependencies
library(tidyverse)
library(knitr)
library(kableExtra)
library(plotrix)  # for std.error
library(brms)
library(parallel)
library(sjPlot)
library(sjstats)
library(patchwork)
# rounds all numerics in a df
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
# get data
exp_1_ia_amp_trial_level_data <-
read.csv("../experiment 1/data/processed/trial_level_ia_amp_positive_negative_data.csv") %>%
mutate(Experiment = 1,
influenced = recode(influenced,
`0` = "no",
`1` = "yes")) %>%
filter(self_exclusion_1 == "Yes, use my data" & complete_data == TRUE)
exp_2_ia_amp_trial_level_data <-
read.csv("../experiment 2/data/processed/trial_level_ia_amp_positive_negative_data.csv") %>%
mutate(Experiment = 2,
influenced = recode(influenced,
`0` = "no",
`1` = "yes")) %>%
filter(self_exclusion_1 == "Yes, use my data" & complete_data == TRUE)
exp_3_ia_amp_trial_level_data <-
read.csv("../experiment 3/data/processed/trial_level_ia_amp_positive_negative_data.csv") %>%
mutate(Experiment = 3,
influenced = recode(influenced,
`0` = "no",
`1` = "yes")) %>%
filter(self_exclusion_1 == "Yes, use my data" & complete_data == TRUE)
exp_4_ia_amp_trial_level_data <-
read.csv("../experiment 4/data/processed/trial_level_ia_amp_positive_negative_data.csv") %>%
mutate(Experiment = 4,
influenced = recode(influenced,
`0` = "no",
`1` = "yes")) %>%
filter(self_exclusion_1 == "Yes, use my data" & complete_data == TRUE) %>%
select(-age, -gender, -party)
combined_data <- rbind(exp_1_ia_amp_trial_level_data,
exp_2_ia_amp_trial_level_data,
exp_3_ia_amp_trial_level_data,
exp_4_ia_amp_trial_level_data) %>%
mutate(Experiment = as.factor(Experiment))
# model generic setup
iterations    <- 2000
chains        <- 4
sample_prior  <- TRUE  # to optionally calculate Savage Dickey-BF
cores         <- detectCores()
control       <- list(adapt_delta = 0.99)
model_formula <- rating ~ influenced * prime_type + (1 | subject)
model_family  <- bernoulli(link = "logit")
# for models with weak priors, weak priors placed on all parameters using reccomendations from  https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations
weak_prior    <- c(set_prior(prior = "normal(0, 1)"))
?set_prior
