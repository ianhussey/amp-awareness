library(tidyverse)
library(lme4)
library(sjPlot)
library(effects)
library(brms)
exploratory_df <- read.csv("exploratory_18_07_10.csv")
AMP_df <- read.csv("modified_intentionality_amp_18_07_10.csv")
post_df <- read.csv("post-questions_18_07_10.csv")
demographics_df <- read.csv("demographics_18_07_10.csv")
prolificid_df <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode == "ProlificCode") %>%
dplyr::select(subject, response)
self_exclusion <- post_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
dplyr::select(subject, trialcode, response)
screen <- full_join(prolificid_df, self_exclusion, by="subject") %>%
group_by(subject) %>%
filter(n() == 6) %>%
dplyr::rename(prolificid = response.x, response = response.y) %>%
mutate(response = as.character(response))
questions <- post_df %>%
mutate(response = as.character(response)) %>%
mutate(response = ifelse(response == "not at all", 1,
ifelse(response == "a little", 2,
ifelse(response == "sometimes", 3,
ifelse(response == "most of the time", 4,
ifelse(response == "almost always" | response == "always", 5, response)))))) %>%
na.omit(.)
AMP_lagged <- AMP_df %>%
mutate(intentional = ifelse(trialcode == "intention_check" & correct == 1, 1, 0)) %>%
mutate(intentional = lead(intentional)) %>%
filter(trialcode == "prime_positive" | trialcode == "prime_negative") %>%
mutate(trialcode = as.factor(trialcode)) %>%
mutate(intentional = as.factor(intentional))
model <- glmer(correct ~ intentional * trialcode + (1|subject),
data = AMP_lagged,
family = binomial(link = "logit"))
sjp.glmer(model, type = "pred", vars = c("correct", "intentional"))
sjt.glmer(model)
t <- AMP_lagged %>%
filter(intentional == 1) %>%
dplyr::count(subject, intentional) %>%
arrange(n)
filtered <- AMP_df %>%
filter(trialcode == "intention_check") %>%
filter(correct == 1)
ggplot(data = filtered, aes(x = latency)) +
geom_density()
temp_data_1 <- AMP_lagged %>%
filter(subject != 846999939) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
mutate(amp_effect = prime_positive - prime_negative)
temp_data <- AMP_lagged %>%
filter(subject != 846999939) %>%
mutate(intentional = as.numeric(as.character(intentional)))%>%
group_by(subject) %>%
dplyr::summarize(influence_rate = mean(intentional)) %>%
ungroup() %>%
left_join(temp_data_1, by = "subject")
fit <- lm(amp_effect ~ influence_rate, data = temp_data)
sjp.lm(fit)
sjt.lm(fit, show.std = TRUE)
View(AMP_lagged)
library(plyr)
library(tidyverse)
library(data.table)
library(lme4)
library(sjPlot)
library(effects)
library(brms)
library(TOSTER)
library(DescTools)
library(Rmisc)
library(effsize)
library(psych)
# setwd("demographics/")
# files <- list.files(pattern = ".csv$")
# demographics_df <- tbl_df(rbind.fill(lapply(files, fread, header=TRUE)))
#
# write_csv(demographics_df, "demographics.csv")
demographics_df <- read.csv("demographics.csv")
# setwd("amp")
# files1 <- list.files(pattern = ".csv$")
# AMP_df <- tbl_df(rbind.fill(lapply(files1, fread, header=TRUE)))
#
# write_csv(AMP_df, "AMP.csv")
AMP_df <- read.csv("AMP.csv")
# setwd("questions")
# files2 <- list.files(pattern = ".csv$")
# post_df <- tbl_df(rbind.fill(lapply(files2, fread, header=TRUE)))
#
# write_csv(post_df, "post_questions.csv")
post_df <- read.csv("post_questions.csv")
# Use this df to screen for subjects who didn't give a Prolific ID
prolificid_df <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode == "ProlificCode") %>%
dplyr::select(subject, response)
# Screen questions df for unique values, remove duplicates
self_exclusion <- post_df %>%
dplyr::distinct(subject, trialcode, .keep_all = TRUE) %>%
dplyr::select(subject, trialcode, response)
# Join the above two dfs, filter for only the appropriate number of rows
screen <- full_join(prolificid_df, self_exclusion, by="subject") %>%
group_by(subject) %>%
filter(n() == 6) %>%
dplyr::rename(prolificid = response.x, response = response.y) %>%
mutate(response = as.character(response))
# recode post_df responses, remove NAs
questions <- post_df %>%
mutate(response = as.character(response),
response = ifelse(response == "none" | response == "Never", 1,
ifelse(response == "a few" | response == "Very rarely", 2,
ifelse(response == "less than half" | response == "Somewhat rarely", 3,
ifelse(response == "about half" | response == "Sometimes", 4,
ifelse(response == "more than half", 5,
ifelse(response == "most", 6,
ifelse(response == "all", 7, response)))))))) %>%
na.omit()
screen_qs <- questions %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
dplyr::select(subject, trialcode, response) %>%
group_by(subject) %>%
spread(trialcode, response) %>%
na.omit()
# Leaded df so that "influenced" refers to whether the trial response
# indicated the absence (0) or presence (1) of an influence of the prime
# Also filters incomplete AMP data
AMP_lead <- AMP_df %>%
mutate(influenced = ifelse(trialcode == "intention_check" & correct == 1, 1, 0),
influenced = lead(influenced)) %>%
filter(trialcode == "prime_positive" | trialcode == "prime_negative") %>%
mutate(trialcode = ifelse(trialcode == "prime_positive", 1, 0)) %>%
group_by(subject) %>%
filter(n() == 120) %>%
ungroup() %>% ## IAN: missing this, needed later
semi_join(., screen, by = "subject") %>%
semi_join(., screen_qs, by = "subject")
# rescale variables
AMP_rescaled <- AMP_lead %>%
mutate(influenced = influenced - .5,  # IAN: jamie, you effect coded this and then changed to factor, only one is needed
trialcode = trialcode - .5,
correct = as.numeric(as.character(correct))) ## Ian: had to add this
AMP_influenced <- AMP_rescaled %>%
dplyr::filter(influenced == .5)
AMP_uninfluenced <- AMP_rescaled %>%
dplyr::filter(influenced == -.5)
#### need to filter for 120 trials in AMP ####
#### need to figure out how to get pooled sd for recentering ####
##### Confirmatory analyses #####
# Extra dfs for subject-level analyses
joiner <- AMP_rescaled %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
joiner_uninfl <- AMP_rescaled %>%
filter(influenced == -.5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
joiner_infl <- AMP_rescaled %>%
filter(influenced == .5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
# H2: AMP effect moderated by proportion influenced
fit_h2 <- lm(amp_effect ~ influence_rate, data = subjects_df)
demographics_df <- read.csv("demographics.csv")
AMP_df <- read.csv("AMP.csv")
post_df <- read.csv("post_questions.csv")
# Use this df to screen for subjects who didn't give a Prolific ID
prolificid_df <- demographics_df %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
filter(trialcode == "ProlificCode") %>%
dplyr::select(subject, response)
# Screen questions df for unique values, remove duplicates
self_exclusion <- post_df %>%
dplyr::distinct(subject, trialcode, .keep_all = TRUE) %>%
dplyr::select(subject, trialcode, response)
# Join the above two dfs, filter for only the appropriate number of rows
screen <- full_join(prolificid_df, self_exclusion, by="subject") %>%
group_by(subject) %>%
filter(n() == 6) %>%
dplyr::rename(prolificid = response.x, response = response.y) %>%
mutate(response = as.character(response))
# recode post_df responses, remove NAs
questions <- post_df %>%
mutate(response = as.character(response),
response = ifelse(response == "none" | response == "Never", 1,
ifelse(response == "a few" | response == "Very rarely", 2,
ifelse(response == "less than half" | response == "Somewhat rarely", 3,
ifelse(response == "about half" | response == "Sometimes", 4,
ifelse(response == "more than half", 5,
ifelse(response == "most", 6,
ifelse(response == "all", 7, response)))))))) %>%
na.omit()
screen_qs <- questions %>%
distinct(subject, trialcode, .keep_all = TRUE) %>%
dplyr::select(subject, trialcode, response) %>%
group_by(subject) %>%
spread(trialcode, response) %>%
na.omit()
# Leaded df so that "influenced" refers to whether the trial response
# indicated the absence (0) or presence (1) of an influence of the prime
# Also filters incomplete AMP data
AMP_lead <- AMP_df %>%
mutate(influenced = ifelse(trialcode == "intention_check" & correct == 1, 1, 0),
influenced = lead(influenced)) %>%
filter(trialcode == "prime_positive" | trialcode == "prime_negative") %>%
mutate(trialcode = ifelse(trialcode == "prime_positive", 1, 0)) %>%
group_by(subject) %>%
filter(n() == 120) %>%
ungroup() %>% ## IAN: missing this, needed later
semi_join(., screen, by = "subject") %>%
semi_join(., screen_qs, by = "subject")
# rescale variables
AMP_rescaled <- AMP_lead %>%
mutate(influenced = influenced - .5,  # IAN: jamie, you effect coded this and then changed to factor, only one is needed
trialcode = trialcode - .5,
correct = as.numeric(as.character(correct))) ## Ian: had to add this
AMP_influenced <- AMP_rescaled %>%
dplyr::filter(influenced == .5)
AMP_uninfluenced <- AMP_rescaled %>%
dplyr::filter(influenced == -.5)
# Extra dfs for subject-level analyses
joiner <- AMP_rescaled %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
joiner_uninfl <- AMP_rescaled %>%
filter(influenced == -.5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
joiner_infl <- AMP_rescaled %>%
filter(influenced == .5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
# Extra dfs for subject-level analyses
joiner <- AMP_rescaled %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
joiner_uninfl <- AMP_rescaled %>%
filter(influenced == -.5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
joiner_infl <- AMP_rescaled %>%
filter(influenced == .5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
View(AMP_rescaled)
joiner_infl <- AMP_rescaled %>%
filter(influenced == .5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect)
joiner_infl <- AMP_rescaled %>%
filter(influenced == .5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime"))
joiner_infl <- AMP_rescaled %>%
filter(influenced == .5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect)
joiner_infl <- AMP_rescaled %>%
filter(as.numeric(as.character(influenced)) == .5) %>%
group_by(subject, trialcode) %>%
dplyr::summarize(amp_effect = mean(correct)) %>%
ungroup() %>%
spread(trialcode, amp_effect) %>%
setnames(., c("-0.5", "0.5"), c("false_prime", "true_prime")) %>%
mutate(amp_effect = true_prime - false_prime)
