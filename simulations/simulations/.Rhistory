model_2 <-
glm(group ~ std_amp_effect,
family = binomial(link = "logit"),
weights = influence_rate,
data = input_data)
sjt.glm(model_2, exp.coef = FALSE)
# Assess model fit
## extraction predicted probabilities
prob_2 <- predict(model_2, type = c("response"), se.fit = TRUE)
## add these probabilities back to the original data frame (omitting missing values)
predictions_2 <- input_data %>%
select(group) %>%
na.omit %>%
mutate(prob = prob$fit)
# plot
ggplot(data = predictions_2,
aes(x = as.factor(group),
y = prob,
fill = as.factor(group))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),
alpha = .8) +
geom_point(aes(y = prob,
color = as.factor(group)),
position = position_jitter(width = .15),
size = .5,
alpha = 0.5) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
coord_flip() +
theme_classic() +
xlab("Group") +
ylab("Predicted probability") +
ggtitle("AMP")
View(input_data)
# model
model_2 <-
glm(group ~ std_amp_effect,
family = binomial(link = "logit"),
weights = 1-influence_rate,
data = input_data)
sjt.glm(model_2, exp.coef = FALSE)
# Assess model fit
## extraction predicted probabilities
prob_2 <- predict(model_2, type = c("response"), se.fit = TRUE)
## add these probabilities back to the original data frame (omitting missing values)
predictions_2 <- input_data %>%
select(group) %>%
na.omit %>%
mutate(prob = prob$fit)
# plot
ggplot(data = predictions_2,
aes(x = as.factor(group),
y = prob,
fill = as.factor(group))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),
alpha = .8) +
geom_point(aes(y = prob,
color = as.factor(group)),
position = position_jitter(width = .15),
size = .5,
alpha = 0.5) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
coord_flip() +
theme_classic() +
xlab("Group") +
ylab("Predicted probability") +
ggtitle("AMP")
effsize::cohen.d(prob ~ group, data = predictions)
effsize::cohen.d(prob2 ~ group, data = predictions2)
effsize::cohen.d(prob2 ~ group, data = predictions_2)
effsize::cohen.d(prob ~ group, data = predictions)
effsize::cohen.d(prob ~ group, data = prediction_2)
## add these probabilities back to the original data frame (omitting missing values)
predictions_2 <- input_data %>%
select(group) %>%
na.omit %>%
mutate(prob = prob$fit)
# plot
ggplot(data = predictions_2,
aes(x = as.factor(group),
y = prob,
fill = as.factor(group))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),
alpha = .8) +
geom_point(aes(y = prob,
color = as.factor(group)),
position = position_jitter(width = .15),
size = .5,
alpha = 0.5) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
coord_flip() +
theme_classic() +
xlab("Group") +
ylab("Predicted probability") +
ggtitle("AMP")
effsize::cohen.d(prob ~ group, data = predictions)
effsize::cohen.d(prob ~ group, data = prediction_2)
effsize::cohen.d(prob ~ group, data = predictions)
effsize::cohen.d(prob ~ group, data = predictions_2)
# model
model_2 <-
glm(group ~ std_amp_effect,
family = binomial(link = "logit"),
weights = 1-influence_rate,
data = input_data)
sjt.glm(model_2, exp.coef = FALSE)
# Assess model fit
## extraction predicted probabilities
prob_2 <- predict(model_2, type = c("response"), se.fit = TRUE)
## add these probabilities back to the original data frame (omitting missing values)
predictions_2 <- input_data %>%
select(group) %>%
na.omit %>%
mutate(prob = prob$fit)
# plot
ggplot(data = predictions_2,
aes(x = as.factor(group),
y = prob,
fill = as.factor(group))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),
alpha = .8) +
geom_point(aes(y = prob,
color = as.factor(group)),
position = position_jitter(width = .15),
size = .5,
alpha = 0.5) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
coord_flip() +
theme_classic() +
xlab("Group") +
ylab("Predicted probability") +
ggtitle("AMP")
effsize::cohen.d(prob ~ group, data = predictions)
effsize::cohen.d(prob ~ group, data = predictions_2)
## add these probabilities back to the original data frame (omitting missing values)
predictions_2 <- input_data %>%
select(group) %>%
na.omit %>%
mutate(prob = prob_2$fit)
# plot
ggplot(data = predictions_2,
aes(x = as.factor(group),
y = prob,
fill = as.factor(group))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),
alpha = .8) +
geom_point(aes(y = prob,
color = as.factor(group)),
position = position_jitter(width = .15),
size = .5,
alpha = 0.5) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
coord_flip() +
theme_classic() +
xlab("Group") +
ylab("Predicted probability") +
ggtitle("AMP")
effsize::cohen.d(prob ~ group, data = predictions)
effsize::cohen.d(prob ~ group, data = predictions_2)
# model
model_2 <-
glm(group ~ std_amp_effect,
family = binomial(link = "logit"),
weights = influence_rate,
data = input_data)
sjt.glm(model_2, exp.coef = FALSE)
# Assess model fit
## extraction predicted probabilities
prob_2 <- predict(model_2, type = c("response"), se.fit = TRUE)
## add these probabilities back to the original data frame (omitting missing values)
predictions_2 <- input_data %>%
select(group) %>%
na.omit %>%
mutate(prob = prob_2$fit)
# plot
ggplot(data = predictions_2,
aes(x = as.factor(group),
y = prob,
fill = as.factor(group))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),
alpha = .8) +
geom_point(aes(y = prob,
color = as.factor(group)),
position = position_jitter(width = .15),
size = .5,
alpha = 0.5) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
coord_flip() +
theme_classic() +
xlab("Group") +
ylab("Predicted probability") +
ggtitle("AMP")
effsize::cohen.d(prob ~ group, data = predictions)
effsize::cohen.d(prob ~ group, data = predictions_2)
library(tidyverse)
library(patchwork)
library(timesavers)
library(broom)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
# simulate
influence_rate <- seq(from = 0, to = 1, by = 0.001)
b_intercept <- 0
b_influence_rate <- 0.55
sigma <- 0.1
# group 1
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_1 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 1)
# group 0
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_0 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 0,
std_amp_effect = std_amp_effect*-1)
# combine
sim_data_1 <- rbind(sim_data_group_1, sim_data_group_0)
## 2 Differences in AMP effect not moderated by influence_rate rate
# simulate
influence_rate <- seq(from = 0, to = 1, by = 0.001)
b_intercept <- 0.3
b_influence_rate <- 0
sigma <- 0.1
# group 1
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_1 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 1)
# group 0
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_0 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 0,
std_amp_effect = std_amp_effect*-1)
# combine
sim_data_2 <- rbind(sim_data_group_1, sim_data_group_0)
## 3 No differences in AMP effect, not moderated by influence_rate rate
# simulate
influence_rate <- seq(from = 0, to = 1, by = 0.001)
b_intercept <- 0
b_influence_rate <- 0
sigma <- 0.1
# group 1
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_1 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 1)
# group 0
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_0 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 0)
# combine
sim_data_3 <- rbind(sim_data_group_1, sim_data_group_0)
p1 <-
ggplot(sim_data_1,
aes(influence_rate, std_amp_effect, group = as.factor(group), color = as.factor(group))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm") +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
theme_classic() +
xlim(0,1) +
ylim(-1,1) +
theme(legend.position = "none") +
ylab("AMP effect") +
xlab("Influence rate")
p2 <-
ggplot(sim_data_2,
aes(influence_rate, std_amp_effect, group = as.factor(group), color = as.factor(group))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm") +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
theme_classic() +
xlim(0,1) +
ylim(-1,1) +
theme(legend.position = "none") +
ylab("AMP effect") +
xlab("Influence rate")
p3 <-
ggplot(sim_data_3,
aes(influence_rate, std_amp_effect, group = as.factor(group), color = as.factor(group))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm") +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
theme_classic() +
xlim(0,1) +
ylim(-1,1) +
theme(legend.position = "none") +
ylab("AMP effect") +
xlab("Influence rate")
p1 + p2 + p3 + plot_layout(ncol = 3)
fit1 <- glm(group ~ std_amp_effect * influence_rate,
family = binomial(link = "logit"),
data = sim_data_1)
fit1 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
plot_model(fit1, transform = NULL)
fit2 <- glm(group ~ std_amp_effect * influence_rate,
family = binomial(link = "logit"),
data = sim_data_2)
fit2 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
plot_model(fit2, transform = NULL)
influence_rate <- seq(from = 0, to = 1, by = 0.001)
b_intercept <- 0.3
b_influence_rate <- 0
sigma <- 0.1
# group 1
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_1 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 1)
# group 0
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_0 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 0,
std_amp_effect = std_amp_effect*-1)
# combine
sim_data_2 <- rbind(sim_data_group_1, sim_data_group_0)
fit2 <- glm(group ~ std_amp_effect * influence_rate,
family = binomial(link = "logit"),
data = sim_data_2)
fit2 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
influence_rate <- seq(from = 0, to = 1, by = 0.001)
b_intercept <- 0.3
b_influence_rate <- 0
sigma <- 0.1
# group 1
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_1 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 1)
# group 0
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_0 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 0,
std_amp_effect = std_amp_effect*-1)
# combine
sim_data_2 <- rbind(sim_data_group_1, sim_data_group_0)
fit2 <- glm(group ~ std_amp_effect * influence_rate,
family = binomial(link = "logit"),
data = sim_data_2)
fit2 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
influence_rate <- seq(from = 0, to = 1, by = 0.001)
b_intercept <- 0.3
b_influence_rate <- 0
sigma <- 0.1
# group 1
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_1 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 1)
# group 0
error <- rnorm(influence_rate, 0, sigma)
std_amp_effect <- b_intercept + b_influence_rate*influence_rate + error
sim_data_group_0 <- cbind.data.frame(std_amp_effect, influence_rate) %>%
filter(std_amp_effect <= 1 & std_amp_effect >= -1) %>%
mutate(group = 0,
std_amp_effect = std_amp_effect*-1)
# combine
sim_data_2 <- rbind(sim_data_group_1, sim_data_group_0)
fit2 <- glm(group ~ std_amp_effect * influence_rate,
family = binomial(link = "logit"),
data = sim_data_2)
fit2 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
plot_model(fit2, transform = NULL)
fit2 <- glm(group ~ std_amp_effect * influence_rate,
family = binomial(link = "logit"),
data = sim_data_2)
fit2 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
p1 <-
ggplot(sim_data_1,
aes(influence_rate, std_amp_effect, group = as.factor(group), color = as.factor(group))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm") +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
theme_classic() +
xlim(0,1) +
ylim(-1,1) +
theme(legend.position = "none") +
ylab("AMP effect") +
xlab("Influence rate")
p2 <-
ggplot(sim_data_2,
aes(influence_rate, std_amp_effect, group = as.factor(group), color = as.factor(group))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm") +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
theme_classic() +
xlim(0,1) +
ylim(-1,1) +
theme(legend.position = "none") +
ylab("AMP effect") +
xlab("Influence rate")
p3 <-
ggplot(sim_data_3,
aes(influence_rate, std_amp_effect, group = as.factor(group), color = as.factor(group))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm") +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
theme_classic() +
xlim(0,1) +
ylim(-1,1) +
theme(legend.position = "none") +
ylab("AMP effect") +
xlab("Influence rate")
p1 + p2 + p3 + plot_layout(ncol = 3)
fit2 <- glm(group ~ std_amp_effect,
family = binomial(link = "logit"),
data = sim_data_2)
fit2 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
fit2 %>%
tidy() %>%
mutate(lwr = estimate + std.error*1.96,
upr = estimate - std.error*1.96) %>%
select(term, estimate, lwr, upr, p.value) %>%
rename(log_odds = estimate) %>%
filter(term != "(Intercept)") %>%
round_df(2) %>%
kable()
